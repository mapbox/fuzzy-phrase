// automatically generated by the FlatBuffers compiler, do not modify


#![allow(dead_code)]
#![allow(unused_imports)]
extern crate flatbuffers;

pub enum EntryOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
    type Inner = Entry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Entry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Entry {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EntryArgs<'args>) -> flatbuffers::WIPOffset<Entry<'bldr>> {
      let mut builder = EntryBuilder::new(_fbb);
      if let Some(x) = args.compressed_ids { builder.add_compressed_ids(x); }
      builder.add_count(args.count);
      builder.finish()
    }

    pub const VT_COUNT: flatbuffers::VOffsetT = 4;
    pub const VT_COMPRESSED_IDS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn count(&self) -> u32 {
    self._tab.get::<u32>(Entry::VT_COUNT, Some(0)).unwrap()
  }
  #[inline]
  pub fn compressed_ids(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Entry::VT_COMPRESSED_IDS, None).map(|v| v.safe_slice())
  }
}

pub struct EntryArgs<'a> {
    pub count: u32,
    pub compressed_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for EntryArgs<'a> {
    #[inline]
    fn default() -> Self {
        EntryArgs {
            count: 0,
            compressed_ids: None,
        }
    }
}
pub struct EntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_count(&mut self, count: u32) {
    self.fbb_.push_slot::<u32>(Entry::VT_COUNT, count, 0);
  }
  #[inline]
  pub fn add_compressed_ids(&mut self, compressed_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_COMPRESSED_IDS, compressed_ids);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum InvertedIndexOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct InvertedIndex<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InvertedIndex<'a> {
    type Inner = InvertedIndex<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> InvertedIndex<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        InvertedIndex {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args InvertedIndexArgs<'args>) -> flatbuffers::WIPOffset<InvertedIndex<'bldr>> {
      let mut builder = InvertedIndexBuilder::new(_fbb);
      if let Some(x) = args.entries { builder.add_entries(x); }
      builder.finish()
    }

    pub const VT_ENTRIES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn entries(&self) -> Option<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Entry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Entry<'a>>>>>(InvertedIndex::VT_ENTRIES, None)
  }
}

pub struct InvertedIndexArgs<'a> {
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Entry<'a >>>>>,
}
impl<'a> Default for InvertedIndexArgs<'a> {
    #[inline]
    fn default() -> Self {
        InvertedIndexArgs {
            entries: None,
        }
    }
}
pub struct InvertedIndexBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InvertedIndexBuilder<'a, 'b> {
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InvertedIndex::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InvertedIndexBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InvertedIndexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InvertedIndex<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_inverted_index<'a>(buf: &'a [u8]) -> InvertedIndex<'a> {
  flatbuffers::get_root::<InvertedIndex<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_inverted_index<'a>(buf: &'a [u8]) -> InvertedIndex<'a> {
  flatbuffers::get_size_prefixed_root::<InvertedIndex<'a>>(buf)
}

#[inline]
pub fn finish_inverted_index_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<InvertedIndex<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_inverted_index_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<InvertedIndex<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
